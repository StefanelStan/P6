pragma solidity >0.4.25;

import 'openzeppelin-solidity/contracts/ownership/Ownable.sol';
import '../diamondaccesscontrol/MinerRole.sol';
import '../diamondaccesscontrol/ManufacturerRole.sol';
import '../diamondaccesscontrol/MasterjewelerRole.sol';
import '../diamondaccesscontrol/RetailerRole.sol';
import '../diamondaccesscontrol/CustomerRole.sol';

contract SupplyChain is Ownable, MinerRole, ManufacturerRole, MasterjewelerRole, RetailerRole, CustomerRole {

    struct Item {
        uint sku;  // Stock Keeping Unit (SKU)
        uint upc; // Universal Product Code (UPC), generated by the Miner, goes on the package, can be verified by the Customer
        uint productID;  // Product ID potentially a combination of upc + sku
        uint itemPrice; //item price
        uint productPrice; // product Price
        string minerName; // Miner Name
        string mineInformation;  // Mine Information
        string mineLatitude; // Mine Latitude
        string mineLongitude;  // Mine Longitude
        string itemNotes; // Item Notes
        State itemState;  // Item State as represented in the enum above
        address owner;  // Metamask-Ethereum address of the current owner as the product moves through stages
        address miner; // Metamask-Ethereum address of the Farmer
        address manufacturer;  // Metamask-Ethereum address of the Manufacturer
        address masterjeweler; // Metamask-Ethereum address of the Masterjeweler
        address retailer; // Metamask-Ethereum address of the Retailer
        address customer; // Metamask-Ethereum address of the Customer
    }

    enum State { 
        Mined,                  // 0
        ForSale,                // 1
        Sold,                   // 2
        Sent,                   // 3
        Received,               // 4
        SentToCut,              // 5
        ReceivedForCutting,     // 6
        Cut,                    // 7
        SentFromCutting,        // 8
        ReceivedFromCutting,    // 9
        MarkedForPurchasing,    // 10    
        SentForPurchasing,      // 11
        ReceivedForPurchasing,  // 12
        ForPurchasing,          // 13
        Purchased,              // 14
        Fetched                 // 15
    }

    State defaultState = State.Mined;

    // for Stock Keeping Unit (SKU)
    uint _sku;

    // maps the UPC to an Item.
    mapping (uint => Item) items;

    // maps the UPC/item to an array of TxHash & tracks its journey through the supply chain -- to be sent from DApp.
    mapping (uint => string[]) itemsHistory;
  
    // Define 16 events with the same 16 state values and accept 'upc' as input argument
    event Mined(uint upc);
    event ForSale(uint upc);
    event Sold(uint upc);
    event Sent(uint upc);
    event Received(uint upc);
    event SentToCut(uint upc);
    event ReceivedForCutting(uint upc);
    event Cut(uint upc);
    event SentFromCutting(uint upc);
    event ReceivedFromCutting(uint upc);
    event MarkedForPurchasing(uint upc);
    event SentForPurchasing(uint upc);
    event ReceivedForPurchasing(uint upc);
    event ForPurchasing(uint upc);
    event Purchased(uint upc);
    event Fetched(uint upc);

    // Define a modifer that verifies the Caller
    modifier verifyCaller(address _address) {
        require(msg.sender == _address, "Only the authorized user/address can perform this"); 
        _;
    }

    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint _price) { 
        require(msg.value >= _price, "Not enough payment sent"); 
        _;
    }
  
    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValueForSelling(uint _upc) {
        _;
        uint _price = items[_upc].itemPrice;
        uint amountToReturn = msg.value - _price;
        address payable manufacturerAddres = address(uint160(items[_upc].manufacturer));
        manufacturerAddres.transfer(amountToReturn);
    }

    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValueForPurchasing(uint _upc) {
        _;
        uint _price = items[_upc].productPrice;
        uint amountToReturn = msg.value - _price;
        address payable customerAddress = address(uint160(items[_upc].customer));
        customerAddress.transfer(amountToReturn);
    }

    // Define a modifier that checks if an item.state of a upc is Mined
    modifier mined(uint _upc) {
        //State.mined == 0 so for any inexistent item, its state will be zero. Need stronger verification eg: has an owner
        require(items[_upc].itemState == State.Mined && items[_upc].owner != address(0), "Item state is not Mined");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is ForSale
    modifier forSale(uint _upc) {
        require(items[_upc].itemState == State.ForSale, "Item state is not ForSale");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Sold
    modifier sold(uint _upc) {
        require(items[_upc].itemState == State.Sold, "Item state is not Sold");
        _;
    }
  
    // Define a modifier that checks if an item.state of a upc is Sent
    modifier sent(uint _upc) {
        require(items[_upc].itemState == State.Sent, "Item state is not Sent");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Received
    modifier received(uint _upc) {
        require(items[_upc].itemState == State.Received, "Item state is not Received");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is SentToCut
    modifier sentToCut(uint _upc) {
        require(items[_upc].itemState == State.SentToCut, "Item state is not SentToCut");
        _;
    }
  
    // Define a modifier that checks if an item.state of a upc is ReceivedForCutting
    modifier receivedForCutting(uint _upc) {
        require(items[_upc].itemState == State.ReceivedForCutting, "Item state is not ReceivedForCutting");
        _;  
    }

    // Define a modifier that checks if an item.state of a upc is Cut
    modifier cut(uint _upc) {
        require(items[_upc].itemState == State.Cut, "Item state is not Cut");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is SentFromCutting
    modifier sentFromCutting(uint _upc) {
        require(items[_upc].itemState == State.SentFromCutting, "Item state is not SentFromCutting");
        _;
    }
    
    // Define a modifier that checks if an item.state of a upc is ReceivedFromCutting
    modifier receivedFromCutting(uint _upc) {
        require(items[_upc].itemState == State.ReceivedFromCutting, "Item state is not ReceivedFromCutting");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is MarkedForPurchasing
    modifier markedForPurchasing(uint _upc) {
        require(items[_upc].itemState == State.MarkedForPurchasing, "Item state is not MarkedForPurchasing");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is SentForPurchasing
    modifier sentForPurchasing(uint _upc) {
        require(items[_upc].itemState == State.SentForPurchasing, "Item state is not SentForPurchasing");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is ReceivedForPurchasing
    modifier receivedForPurchasing(uint _upc) {
        require(items[_upc].itemState == State.ReceivedForPurchasing, "Item state is not ReceivedForPurchasing");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is ForPurchasing
    modifier forPurchasing(uint _upc) {
        require(items[_upc].itemState == State.ForPurchasing, "Item state is not ForPurchasing");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Purchased
    modifier purchased(uint _upc) {
        require(items[_upc].itemState == State.Purchased, "Item state is not Purchased");
        _;
    }   
    // Define a modifier that checks if an item.state of a upc is Fetched
    modifier fetched(uint _upc) {
        require(items[_upc].itemState == State.Fetched, "Item state is not Fetched");
        _;
    }

    // In the constructor set 'sku' to 1 and 'upc' to 1
    constructor() public payable {
        _sku = 0;
    }

    // Define a function 'kill' if required
    function kill() external onlyOwner {
        require(isOwner(), "Only owner can kill this contract");
        selfdestruct(address(uint160(owner())));
    }

    // Define a function 'mineItem' that allows a miner to mark an item 'Mined'
    function mineItem(
        uint _upc, 
        string memory _minerName, 
        string memory _mineInformation, 
        string memory _mineLatitude, 
        string memory _mineLongitude, 
        string memory _itemNotes
    ) 
        public onlyMiner
    {
        require(items[_upc].owner == address(0), 'Item already exists');
        
        items[_upc] = Item(_sku, _upc, _upc + _sku, 0, 0, _minerName, _mineInformation, 
                           _mineLatitude, _mineLongitude, _itemNotes, State.Mined, 
                           msg.sender, msg.sender, address(0), address(0), address(0), address(0));
        _sku++;
        emit Mined(_upc);
    }

  // // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
  // function processItem(uint _upc) public 
  // // Call modifier to check if upc has passed previous supply chain stage
  
  // // Call modifier to verify caller of this function
  
  // {
  //   // Update the appropriate fields
    
  //   // Emit the appropriate event
    
  // }

    // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
    function sellItem(uint _upc, uint _price) 
        public 
        onlyMiner 
        mined(_upc) 
        verifyCaller(items[_upc].owner) 
    {
        Item storage item = items[_upc];
        item.itemPrice = _price;
        item.itemState = State.ForSale;
        emit ForSale(_upc);
    }

  // // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  // function packItem(uint _upc) public 
  // // Call modifier to check if upc has passed previous supply chain stage
  
  // // Call modifier to verify caller of this function
  
  // {
  //   // Update the appropriate fields
    
  //   // Emit the appropriate event
    
  // }


    // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
    function buyItem(uint _upc) 
        public 
        payable 
        onlyManufacturer 
        forSale(_upc) 
        paidEnough(items[_upc].itemPrice) 
        checkValueForSelling(_upc)
    {
        Item storage item = items[_upc];
        address(uint160(item.miner)).transfer(item.itemPrice);
        item.owner = msg.sender;
        item.manufacturer = msg.sender;
        item.itemState = State.Sold;
        emit Sold(_upc);
    }

    // Define a function 'shipItem' that allows the distributor to mark an item 'Sent'
    function sendItem(uint _upc) public sold(_upc) verifyCaller(items[_upc].miner) {
        items[_upc].itemState = State.Sent;
        emit Sent(_upc);
    }

    // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
    // Use the above modifiers to check if the item is shipped
    function receiveItem(uint _upc) public sent(_upc) verifyCaller(items[_upc].manufacturer) {
        items[_upc].itemState = State.Received;
        emit Received(_upc);
    }

    function sendItemToCut(uint _upc, address _masterjeweler) public received(_upc) verifyCaller(items[_upc].manufacturer){
        require(isMasterjeweler(_masterjeweler), "The given address is not a Masterjeweler Role");
        items[_upc].itemState = State.SentToCut;
        items[_upc].masterjeweler = _masterjeweler;
        emit SendToCut(_upc);
    }
    function receiveItemToCut(uint _upc) public {}
    function cutItem(uint _upc) public {}
    function returnCutItem(uint _upc) public {}
    function receiveCutItem(uint _upc) public {}
    function markForPurchasing(uint _upc, uint price) public {}
    function sendItemForPurchasing(uint _upc, address retailer) public {}
    function receiveItemForPurchasing(uint _upc) public {}
    function putUpForPurchasing(uint _upc) public {}
    //function purchaseItem(uint _upc) public {}
    function fetchItem(uint _upc) public {}
  
  

    // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
    // Use the above modifiers to check if the item is received
    function purchaseItem(uint _upc) public 
        // Call modifier to check if upc has passed previous supply chain stage
        
        // Access Control List enforced by calling Smart Contract / DApp
    {
        // Update the appropriate fields - ownerID, consumerID, itemState
        
        // Emit the appropriate event
    
    }

    // Define a function 'fetchItemBufferOne' that fetches the data
    function fetchItemBufferOne(uint _upc) 
        public 
        view 
        returns (
            uint sku,
            uint upc,
            address owner,
            address miner,
            string memory minerName,
            string memory mineInformation,
            string memory mineLatitude,
            string memory mineLongitude
        ) 
    {
    // Assign values to the 8 parameters
        Item memory item = items[_upc];
        sku = item.sku;
        upc = item.upc;
        owner = item.owner;
        miner = item.miner;
        minerName = item.minerName;
        mineInformation = item.mineInformation;
        mineLatitude = item.mineLatitude;
        mineLongitude = item.mineLongitude;
    }

    // Define a function 'fetchItemBufferTwo' that fetches the data
    function fetchItemBufferTwo(uint _upc) 
        public 
        view 
        returns (
            uint sku,
            uint upc,
            uint productID,
            string memory itemNotes,
            uint itemPrice,
            uint productPrice,
            State itemState,
            address manufacturer,
            address masterjeweler,
            address retailer,
            address customer
        ) 
    {
        // Assign values to the 10 parameters
        Item memory item = items[_upc];
           
        return (
            item.sku,
            item.upc,
            item.productID,
            item.itemNotes,
            item.itemPrice,
            item.productPrice,
            item.itemState,
            item.manufacturer,
            item.masterjeweler,
            item.retailer,
            item.customer
        );
    }
}