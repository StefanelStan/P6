pragma solidity >0.4.25;
// Define a contract 'Supplychain'
import 'openzeppelin-solidity/contracts/ownership/Ownable.sol';
import 'openzeppelin-solidity/contracts/ownership/Ownable.sol';

contract SupplyChain is Ownable {

    // Define 'owner'
    // address owner;

    // Define a variable called 'upc' for Universal Product Code (UPC)
    uint  upc;

    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint  sku;

    // Define a public mapping 'items' that maps the UPC to an Item.
    mapping (uint => Item) items;

    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
    // that track its journey through the supply chain -- to be sent from DApp.
    mapping (uint => string[]) itemsHistory;
  
    // Define enum 'State' with the following values:
    enum State { 
        Mined,                  // 0
        ForSale,                // 1
        Sold,                   // 2
        Sent,                   // 3
        Received,               // 4
        SentToCut,              // 5
        ReceivedForCutting,     // 6
        Cut,                    // 7
        SentFromCutting,        // 8
        ReceivedFromCutting,    // 9
        MarkedForPurchasing,    // 10    
        SentForPurchasing,      // 11
        ReceivedForPurchasing,  // 12
        ForPurchasing,          // 13
        Purchased,              // 14
        Fetched                 // 15
    }

    State defaultState = State.Mined;

    // Define a struct 'Item' with the following fields:
    struct Item {
        uint sku;  // Stock Keeping Unit (SKU)
        uint upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address originFarmerID; // Metamask-Ethereum address of the Farmer
        string originFarmName; // Farmer Name
        string originFarmInformation;  // Farmer Information
        string originFarmLatitude; // Farm Latitude
        string originFarmLongitude;  // Farm Longitude
        uint productID;  // Product ID potentially a combination of upc + sku
        string productNotes; // Product Notes
        uint productPrice; // Product Price
        State itemState;  // Product State as represented in the enum above
        address distributorID;  // Metamask-Ethereum address of the Distributor
        address retailerID; // Metamask-Ethereum address of the Retailer
        address consumerID; // Metamask-Ethereum address of the Consumer
    }

    // Define 8 events with the same 8 state values and accept 'upc' as input argument
    event Harvested(uint upc);
    event Processed(uint upc);
    event Packed(uint upc);
    event ForSale(uint upc);
    event Sold(uint upc);
    event Shipped(uint upc);
    event Received(uint upc);
    event Purchased(uint upc);

    // Define a modifer that checks to see if msg.sender == owner of the contract
    // modifier onlyOwner() {
    //   require(msg.sender == owner);
    //   _;
    // }

    // Define a modifer that verifies the Caller
    modifier verifyCaller (address _address) {
        require(msg.sender == _address); 
        _;
    }

    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint _price) { 
        require(msg.value >= _price); 
        _;
    }
  
    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValueForSelling(uint _upc) {
        _;
        uint _price = items[_upc].productPrice;
        uint amountToReturn = msg.value - _price;
        address payable consumerAddress = address(uint160(items[_upc].consumerID));
        consumerAddress.transfer(amountToReturn);
    }

    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValueForPurchasing(uint _upc) {
        _;
        uint _price = items[_upc].productPrice;
        uint amountToReturn = msg.value - _price;
        address payable consumerAddress = address(uint160(items[_upc].consumerID));
        consumerAddress.transfer(amountToReturn);
    }

    // Define a modifier that checks if an item.state of a upc is Harvested
    modifier mined(uint _upc) {
        require(items[_upc].itemState == State.Mined);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Harvested
    modifier forSale(uint _upc) {
        require(items[_upc].itemState == State.ForSale);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Processed
    modifier sold(uint _upc) {

        _;
    }
  
    // Define a modifier that checks if an item.state of a upc is Packed
    modifier sent(uint _upc) {

        _;
    }

    // Define a modifier that checks if an item.state of a upc is ForSale
    modifier received(uint _upc) {

        _;
    }

    // Define a modifier that checks if an item.state of a upc is Sold
    modifier sentToCut(uint _upc) {

        _;
    }
  
    // Define a modifier that checks if an item.state of a upc is Shipped
    modifier receivedForCutting(uint _upc) {

        _;  
    }

    // Define a modifier that checks if an item.state of a upc is Received
    modifier cut(uint _upc) {

        _;
    }

    // Define a modifier that checks if an item.state of a upc is Received
    modifier sentFromCutting(uint _upc) {

        _;
    }
    
    // Define a modifier that checks if an item.state of a upc is Received
    modifier receivedFromCutting(uint _upc) {

        _;
    }

    // Define a modifier that checks if an item.state of a upc is Received
    modifier sentForPurchasing(uint _upc) {

        _;
    }

    // Define a modifier that checks if an item.state of a upc is Received
    modifier receivedForPurchasing(uint _upc) {

        _;
    }

    // Define a modifier that checks if an item.state of a upc is Received
    modifier forPurchasing(uint _upc) {

        _;
    }

    // Define a modifier that checks if an item.state of a upc is Received
    modifier purchased(uint _upc) {

        _;
    }   
    // Define a modifier that checks if an item.state of a upc is Received
    modifier fetched(uint _upc) {

        _;
    }

    // In the constructor set 'owner' to the address that instantiated the contract
    // and set 'sku' to 1
    // and set 'upc' to 1
    constructor() public payable {
        sku = 1;
        upc = 1;
    }

        // Define a function 'kill' if required
    function kill() external onlyOwner{
        require(isOwner(), "Only owner can kill this contract");
        selfdestruct(address(uint160(owner())));
    }

    // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
    function mineItem(
        uint _upc, 
        address _originFarmerID, 
        string memory _originFarmName, 
        string memory _originFarmInformation, 
        string memory _originFarmLatitude, 
        string memory _originFarmLongitude, 
        string memory  _productNotes
    ) 
        public 
    {
        // Add the new item as part of Harvest
    
        // Increment sku
        sku = sku + 1;
        // Emit the appropriate event
    }

  // // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
  // function processItem(uint _upc) public 
  // // Call modifier to check if upc has passed previous supply chain stage
  
  // // Call modifier to verify caller of this function
  
  // {
  //   // Update the appropriate fields
    
  //   // Emit the appropriate event
    
  // }

    // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
    function sellItem(uint _upc, uint _price) public 
        // Call modifier to check if upc has passed previous supply chain stage
        
        // Call modifier to verify caller of this function
        
    {
        // Update the appropriate fields
        
        // Emit the appropriate event
        
    }

  // // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  // function packItem(uint _upc) public 
  // // Call modifier to check if upc has passed previous supply chain stage
  
  // // Call modifier to verify caller of this function
  
  // {
  //   // Update the appropriate fields
    
  //   // Emit the appropriate event
    
  // }


    // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
    // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
    // and any excess ether sent is refunded back to the buyer
    function buyItem(uint _upc) public payable 
        // Call modifier to check if upc has passed previous supply chain stage
        
        // Call modifer to check if buyer has paid enough
        
        // Call modifer to send any excess ether back to buyer
        
    {
        
        // Update the appropriate fields - ownerID, distributorID, itemState
        
        // Transfer money to farmer
        
        // emit the appropriate event
        
    }

    // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
    // Use the above modifers to check if the item is sold
    function sendItem(uint _upc) public 
        // Call modifier to check if upc has passed previous supply chain stage
        
        // Call modifier to verify caller of this function
        
    {
        // Update the appropriate fields
        
        // Emit the appropriate event
        
    }

    // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
    // Use the above modifiers to check if the item is shipped
    function receiveItem(uint _upc) public 
        // Call modifier to check if upc has passed previous supply chain stage
        
        // Access Control List enforced by calling Smart Contract / DApp
    {
        // Update the appropriate fields - ownerID, retailerID, itemState
        
        // Emit the appropriate event
        
    }

    function sendItemToCut(uint _upc, address masterjeweler) public {}
    function receiveItemToCut(uint _upc) public {}
    function cutItem(uint _upc) public {}
    function returnCutItem(uint _upc) public {}
    function receiveCutItem(uint _upc) public {}
    function markForPurchasing(uint _upc, uint price) public {}
    function sendItemForPurchasing(uint _upc, address retailer) public {}
    function receiveItemForPurchasing(uint _upc) public {}
    function putUpForPurchasing(uint _upc) public {}
    //function purchaseItem(uint _upc) public {}
    function fetchItem(uint _upc) public {}
  
  

    // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
    // Use the above modifiers to check if the item is received
    function purchaseItem(uint _upc) public 
        // Call modifier to check if upc has passed previous supply chain stage
        
        // Access Control List enforced by calling Smart Contract / DApp
    {
        // Update the appropriate fields - ownerID, consumerID, itemState
        
        // Emit the appropriate event
    
    }

    // Define a function 'fetchItemBufferOne' that fetches the data
    function fetchItemBufferOne(uint _upc) 
        public 
        view 
        returns (
            uint    itemSKU,
            uint    itemUPC,
            address ownerID,
            address originFarmerID,
            string  memory originFarmName,
            string  memory originFarmInformation,
            string  memory originFarmLatitude,
            string  memory originFarmLongitude
        ) 
    {
    // Assign values to the 8 parameters
        
        return (
            itemSKU,
            itemUPC,
            ownerID,
            originFarmerID,
            originFarmName,
            originFarmInformation,
            originFarmLatitude,
            originFarmLongitude
        );
    }

    // Define a function 'fetchItemBufferTwo' that fetches the data
    function fetchItemBufferTwo(uint _upc) 
        public 
        view 
        returns (
            uint itemSKU,
            uint itemUPC,
            uint productID,
            string memory productNotes,
            uint productPrice,
            uint itemState,
            address distributorID,
            address retailerID,
            address consumerID
        ) 
    {
        // Assign values to the 9 parameters
       
        return (
            itemSKU,
            itemUPC,
            productID,
            productNotes,
            productPrice,
            itemState,
            distributorID,
            retailerID,
            consumerID
        );
    }
}